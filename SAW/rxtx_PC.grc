options:
  parameters:
    author: cmrivera
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: rxtx_PC
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: GNU Spectrum Analyzer by Carlos RIVERA
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: btn_start
  id: variable_qtgui_push_button
  parameters:
    comment: tab_widget_0@1:1,3,1,1
    gui_hint: tab_widget_0@1:1,3,1,1
    label: '"Start"'
    pressed: '1'
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 484.0]
    rotation: 0
    state: true
- name: entry_end_freq
  id: variable_qtgui_entry
  parameters:
    comment: tab_widget_0@1:1,3,1,1
    gui_hint: tab_widget_0@1:1,2,1,1
    label: End frequency
    type: real
    value: 434.58e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 516.0]
    rotation: 0
    state: enabled
- name: entry_span_freq
  id: variable_qtgui_entry
  parameters:
    comment: tab_widget_0@1:1,2,1,1
    gui_hint: tab_widget_0@1:1,1,1,1
    label: Span
    type: real
    value: 2e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 516.0]
    rotation: 0
    state: enabled
- name: entry_start_freq
  id: variable_qtgui_entry
  parameters:
    comment: tab_widget_0@1:1,0,1,1
    gui_hint: tab_widget_0@1:1,0,1,1
    label: Start frequency
    type: real
    value: 433.42e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 516.0]
    rotation: 0
    state: enabled
- name: entry_var_amplitude_
  id: variable_qtgui_entry
  parameters:
    comment: 5,0,1,2
    gui_hint: 5,0,1,2
    label: 'Amplitude                   '
    type: real
    value: 300e-3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 516.0]
    rotation: 0
    state: enabled
- name: entry_var_carrying_frequency
  id: variable_qtgui_entry
  parameters:
    comment: 6,0,1,2
    gui_hint: 6,0,1,2
    label: 'Carrier frequency       '
    type: real
    value: 86.8e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 612.0]
    rotation: 0
    state: enabled
- name: entry_var_frequency_
  id: variable_qtgui_entry
  parameters:
    comment: 4,0,1,2
    gui_hint: 4,0,1,2
    label: 'Test frequency           '
    type: real
    value: 10e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 372.0]
    rotation: 0
    state: enabled
- name: entry_var_measured_frequency
  id: variable_qtgui_entry
  parameters:
    comment: 7,0,1,2
    gui_hint: 7,0,1,2
    label: 'Measured Frequency  '
    type: real
    value: 434e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 708.0]
    rotation: 0
    state: enabled
- name: entry_var_offset_
  id: variable_qtgui_entry
  parameters:
    comment: 5,2,1,2
    gui_hint: 5,2,1,2
    label: 'Offset                        '
    type: real
    value: '0.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 516.0]
    rotation: 0
    state: enabled
- name: entry_var_sample_rate_gr
  id: variable_qtgui_entry
  parameters:
    comment: 6,2,1,2
    gui_hint: 6,2,1,2
    label: 'Sample rate gr-rpitx  '
    type: real
    value: 200e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 612.0]
    rotation: 0
    state: enabled
- name: entry_var_sample_rate_osmosdr
  id: variable_qtgui_entry
  parameters:
    comment: 7,2,1,2
    gui_hint: 7,2,1,2
    label: Sample rate Osmosdr
    type: real
    value: 1.152e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 708.0]
    rotation: 0
    state: enabled
- name: sample_rate
  id: variable
  parameters:
    comment: sample_rate = sample_rate_osmosdr
    value: entry_var_sample_rate_osmosdr
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: status
  id: variable_qtgui_label
  parameters:
    comment: tab_widget_0@1:2,1,1,2
    formatter: None
    gui_hint: tab_widget_0@1:2,1,1,2
    label: Progress
    type: string
    value: var_status
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 372.0]
    rotation: 0
    state: true
- name: sweeping
  id: variable
  parameters:
    comment: ''
    value: '"False"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 244.0]
    rotation: 0
    state: true
- name: var_method
  id: variable_qtgui_chooser
  parameters:
    comment: tab_widget_0@1:2,0,1,1
    gui_hint: tab_widget_0@1:2,0,1,1
    label: Sweeping method
    label0: Sweep carrier frequency
    label1: Sweep generated frequency
    label2: ''
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '2'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QHBoxLayout
    type: int
    value: '0'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 244.0]
    rotation: 0
    state: true
- name: var_record
  id: variable
  parameters:
    comment: ''
    value: '"False"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 308.0]
    rotation: 0
    state: true
- name: var_status
  id: variable
  parameters:
    comment: ''
    value: '"(0/0) - 0%"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 388.0]
    rotation: 0
    state: enabled
- name: var_waveform_
  id: variable_qtgui_chooser
  parameters:
    comment: 4,2,1,2
    gui_hint: 4,2,1,2
    label: 'Waveform                  '
    label0: Constant
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '["Constant","Sine","Cosine","Square","Triangle","Saw Tooth"]'
    num_opts: '0'
    option0: '100'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0,1,2,3,4,5]'
    orient: Qt.QVBoxLayout
    type: int
    value: '2'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 372.0]
    rotation: 0
    state: enabled
- name: vector_data
  id: variable
  parameters:
    comment: ''
    value: range(vector_length)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 308.0]
    rotation: 0
    state: enabled
- name: vector_data_2
  id: variable
  parameters:
    comment: ''
    value: range(vector_length)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 388.0]
    rotation: 0
    state: enabled
- name: vector_length
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 244.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: float
    vector: vector_data
    vlen: vector_length
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 180.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: float
    vector: vector_data_2
    vlen: vector_length
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 276.0]
    rotation: 0
    state: enabled
- name: epy_module_client
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\nimport\
      \ socket\nfrom gnuradio import eng_notation\nfrom PyQt5 import Qt\n\ndef client(tt):\n\
      \    # Storage variables initial values\n    variables=[\"entry_var_frequency_\"\
      ,\"var_waveform_\",\"entry_var_amplitude_\",\"entry_var_offset_\",\"entry_var_sample_rate_gr\"\
      ,\"entry_var_sample_rate_osmosdr\",\"entry_var_carrying_frequency\",\"entry_var_measured_frequency\"\
      ,\"entry_start_freq\",\"entry_span_freq\",\"entry_end_freq\"]\n    old_values=[]\n\
      \    for variable in variables:\n        exec(\"old_values.append(tt.get_{}())\"\
      .format(variable))\n        # Convert default values of entry controls to eng\
      \ notation \n        if(\"entry\" in variable):\n            Qt.QMetaObject.invokeMethod(eval(\"\
      tt._{}_line_edit\".format(variable)), \"setText\", Qt.Q_ARG(\"QString\", eng_notation.num_to_str(eval(\"\
      tt.{}\".format(variable)))))\n    while True:\n        # Try to connect\n  \
      \      host = '192.168.137.8'\n        port = 4242\n        client_socket =\
      \ socket.socket()\n        try:\n            client_socket.connect((host, port))\n\
      \        except:\n            pass\n        if(client_socket.getsockname()[0]\
      \ != \"0.0.0.0\"):\n            # Connected\n            print(\"Connected to\
      \ server\")\n            while True:\n                # Check if variables have\
      \ changed to send the new values\n                for i, variable in enumerate(variables):\n\
      \                    if((eval(\"tt.get_{}()\".format(variable))!=old_values[i])\
      \ & (\"var\" in variable)):\n                        value=eval(\"tt.get_{}()\"\
      .format(variable))\n                        if(variable==\"var_waveform_\"):\n\
      \                            value=value+100\n\n                        message=variable\
      \ + \"=\" + str(value) + \">\" # Encoding message to send it\n             \
      \           client_socket.send(message.encode())\n                        #\
      \ Register updated variable value\n                        old_values[i]=eval(\"\
      tt.get_{}()\".format(variable))                    \n                    # Check\
      \ if \"entry\" controls text has been modified to change its color (indicating\
      \ pending \"enter\" key)\n                    if \"entry\" in variable:\n  \
      \                      try: # To catch when incorrect value is typed\n     \
      \                       if(eval(\"eng_notation.str_to_num(str(tt._{var_name}_line_edit.text()))!=float(tt.get_{var_name}())\"\
      .format(var_name=variable))):\n                                if(eval(\"tt._{}_tool_bar.styleSheet()\"\
      .format(variable))!=\"QLabel {background-color: yellow}\"):\n              \
      \                      Qt.QMetaObject.invokeMethod(eval(\"tt._{}_tool_bar\"\
      .format(variable)), \"setStyleSheet\", Qt.Q_ARG(\"QString\", \"QLabel {background-color:\
      \ yellow}\"))\n                            else:\n                         \
      \       if(eval(\"tt._{}_tool_bar.styleSheet()\".format(variable))!=\"\"):\n\
      \                                    Qt.QMetaObject.invokeMethod(eval(\"tt._{}_tool_bar\"\
      .format(variable)), \"setStyleSheet\", Qt.Q_ARG(\"QString\", \"\"))        \
      \                \n                        except:\n                       \
      \     if(eval(\"tt._{}_tool_bar.styleSheet()\".format(variable))!=\"QLabel {background-color:\
      \ red}\"):\n                                    Qt.QMetaObject.invokeMethod(eval(\"\
      tt._{}_tool_bar\".format(variable)), \"setStyleSheet\", Qt.Q_ARG(\"QString\"\
      , \"QLabel {background-color: red}\"))\n                            pass\n \
      \                   # Check if \"start\" has been pressed\n                \
      \    btn_index=6\n                    if((tt.get_btn_start()==1) & (tt.tab_widget_0_grid_layout_1.itemAt(btn_index).widget().text()\
      \ == \"Start\")):\n                        tt.tab_widget_0_grid_layout_1.itemAt(btn_index).widget().setText(\"\
      Stop\")\n                        tt.set_btn_start(0)\n                     \
      \   tt.set_sweeping(\"True\")\n                    elif((tt.get_btn_start()==1)\
      \ & (tt.tab_widget_0_grid_layout_1.itemAt(btn_index).widget().text() == \"Stop\"\
      )):\n                        tt.tab_widget_0_grid_layout_1.itemAt(btn_index).widget().setText(\"\
      Start\")\n                        tt.set_btn_start(0)\n                    \
      \    tt.set_sweeping(\"False\")\n                # client_socket.close()\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 260.0]
    rotation: 0
    state: enabled
- name: epy_module_sweep
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\nimport\
      \ numpy as np\nimport zmq\nimport array\nfrom PyQt5 import Qt\nimport time\n\
      import scipy.interpolate as interp\nimport os\nimport datetime\nimport math\n\
      # Function to divide the frequencies sub-lists\ndef list_split(listA, n):\n\
      \    for x in range(0, len(listA), n):\n        every_chunk = listA[x: n+x]\n\
      \        yield every_chunk\n#\n# Function to print the measurement status on\
      \ the GUI\ndef update_status(frequency_list, current_frequency, start_time):\n\
      \    total=len(frequency_list)\n    completed=frequency_list.index(current_frequency)+1\n\
      \    percentage=(completed/total)*100\n    elapsed_time=datetime.datetime.now()-start_time\n\
      \    remaining_time=datetime.timedelta(seconds=elapsed_time.total_seconds()*((100-percentage)/percentage))\n\
      \    return  \"\\t({0}/{1})\\t\\t-\\t{2:1.2f}%\\t-\\tTime remaining: {3}\\t-\\\
      tElapsed time: {4}\".format(\n        completed,total,percentage,str(remaining_time).split('.',\
      \ 2)[0],str(elapsed_time).split('.', 2)[0])\n#\n# Function to retreive the index\
      \ of the closest value of an array\ndef closest(lst, K):\n     lst = np.asarray(lst)\n\
      \     idx = (np.abs(lst - K)).argmin()\n     return idx\n#\ndef sweep(tt):\n\
      \    context=zmq.Context()\n    vector_length=int(tt.get_vector_length())\n\
      \    mean_amplitude=[]\n    mean_amplitude_array=[]\n    # real_values_array=np.array([0])\n\
      \    real_values_array=np.full(vector_length,-1.0)\n    mean_amplitude_array=np.array([0])\n\
      \    # Set the vector sink properties\n    tt.qtgui_vector_sink_f_0.set_line_marker(1,0)\n\
      \    tt.qtgui_vector_sink_f_0.set_line_style(1,0)\n    while True:\n       \
      \ while tt.get_sweeping()==\"True\":\n            # Reset real points plot\n\
      \            tt.set_vector_data_2(real_values_array)\n            # Set delay\
      \ variable\n            delay=0.75\n            start_time=datetime.datetime.now()\n\
      \            # Clear the terminal\n            os.system('cls||clear')\n   \
      \         # Deactivate/Activate Hold maximum in frequency sink\n           \
      \ tt.qtgui_freq_sink_x_0.enable_max_hold(False)\n            tt.qtgui_freq_sink_x_0.enable_max_hold(True)\n\
      \            # Retrieve start, span and end frequency\n            start_freq=tt.get_entry_start_freq()/5\n\
      \            span_freq=tt.get_entry_span_freq()\n            end_freq=tt.get_entry_end_freq()/5\n\
      \            # Calculate the frequency range\n            frequencies=np.arange(start_freq,end_freq,span_freq).tolist()\n\
      \            frequencies.append(end_freq)\n            n=int(len(frequencies)/((end_freq-start_freq)/100e3))\n\
      \            frequency_chunks=list(list_split(frequencies, n))\n           \
      \ # Set the vector sink properties\n            x_start=(frequencies[0]*5)/1e6\n\
      \            x_step=((frequencies[len(frequencies)-1]-frequencies[0])/vector_length)/1e6\n\
      \            tt.qtgui_vector_sink_f_0.set_x_axis(x_start, x_step)\n        \
      \    # Main procees\n            for set in frequency_chunks:\n            \
      \    if tt.get_var_method()==1:\n                    print(\"Changing carrier\
      \ frequency: {}\".format(float(set[0])))\n                    tt.set_entry_var_carrying_frequency(float(set[0]))\n\
      \                for f in set:\n                    if tt.get_var_method()==0:\n\
      \                        print(\"Changing carrier frequency: {}\".format(float(f)))\n\
      \                        tt.set_entry_var_carrying_frequency(float(f)) \n  \
      \                  else:\n                        print(\"Changing generated\
      \ frequency: {}\".format(float(f)))\n                        tt.set_entry_var_frequency_(float(f))\n\
      \                    time.sleep(delay) # Sleep for 500 miliseconds\n       \
      \             # Update status label\n                    try:\n            \
      \            tt.set_var_status(update_status(frequencies, f, start_time))\n\
      \                    except:\n                        pass\n               \
      \     #\n                    if tt.get_sweeping()==\"False\":\n            \
      \            break\n                    # Record stream of data\n          \
      \          sock1=context.socket(zmq.SUB)\n                    sock1.connect(\"\
      tcp://192.168.137.8:5555\")\n                    sock1.setsockopt(zmq.SUBSCRIBE,b\"\
      \")\n                    raw_recv=sock1.recv()\n                    sock1.close()\n\
      \                    recv=array.array('f',raw_recv) #float\n               \
      \     recv=recv[1::2]\n                    # mean_amplitude.append(np.mean(np.abs(recv)))\
      \      # Absolute values\n                    a = np.array( [ num for num in\
      \ recv if num >= 0 ] ) # Only positive values\n                    mean_amplitude.append(np.mean(a))\
      \ # \n                    mean_amplitude_array=np.array(mean_amplitude)\n  \
      \                  try:\n                        # Plot the results\n      \
      \                  arr_ref = np.array(range(vector_length)) # Reference array\
      \ for inporlation\n                        mean_interp = interp.interp1d(np.arange(mean_amplitude_array.size),mean_amplitude_array)\n\
      \                        new_mean_amplitude_array = mean_interp(np.linspace(0,mean_amplitude_array.size-1,arr_ref.size))\n\
      \                        tt.set_vector_data(new_mean_amplitude_array)\n    \
      \                except:\n                        pass\n            # Plot the\
      \ real values over interpolation\n            idx=0\n            try:\n    \
      \            for i,value in enumerate(new_mean_amplitude_array):\n         \
      \           tolerance=abs(new_mean_amplitude_array[i]-new_mean_amplitude_array[i+1])\n\
      \                    if math.isclose(value, mean_amplitude_array[idx],abs_tol\
      \ = tolerance):\n                        real_values_array[i]=value\n      \
      \                  idx=idx+1\n            except:\n                pass\n  \
      \          tt.set_vector_data_2(real_values_array)\n            # time.sleep(5)\n\
      \            #\n            # All frequencies tested, set button back to \"\
      Start\"\n            btn_index=6\n            tt.tab_widget_0_grid_layout_1.itemAt(btn_index).widget().setText(\"\
      Start\")\n            tt.set_sweeping(\"False\")\n            # Reset arrays\n\
      \            mean_amplitude=[]\n            mean_amplitude_array=[]\n      \
      \      real_values_array=np.full(vector_length,-1.0)\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 308.0]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.2'
    axislabels: 'True'
    bw: sample_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: tab_widget_0@0:1,0,1,4
    ctrlpanel: 'False'
    fc: entry_var_measured_frequency
    fftsize: '4096'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: tab_widget_0@0:1,0,1,4
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '-14'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_HAMMING
    ymax: '-5'
    ymin: '-90'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 148.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: 0,0,1,4
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: sample_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.4'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.1'
    ymin: '-1.1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 60.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: tab_widget_0@1
    grid: 'True'
    gui_hint: tab_widget_0@1:0,0,1,4
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '2'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: vector_length
    width1: '2'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"Frequency (MHz)"'
    x_start: '86'
    x_step: '1'
    x_units: '"MHz"'
    y_axis_label: '"Relative Mean voltage"'
    y_units: '""'
    ymax: '0.4'
    ymin: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 244.0]
    rotation: 0
    state: enabled
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: 'print("Starting client and GUI")

      import threading

      threading.Thread(target=epy_module_client.client, daemon=True, args=(self,)).start()

      threading.Thread(target=epy_module_sweep.sweep, daemon=True, args=(self,)).start()'
    comment: ''
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 196.0]
    rotation: 0
    state: true
- name: tab_widget_0
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 1,0,1,4
    label0: Noise source
    label1: Frequency sweep
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 372.0]
    rotation: 0
    state: true
- name: zeromq_sub_source_0
  id: zeromq_sub_source
  parameters:
    address: tcp://192.168.137.8:5555
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 116.0]
    rotation: 0
    state: true

connections:
- [blocks_vector_source_x_0, '0', qtgui_vector_sink_f_0, '0']
- [blocks_vector_source_x_0_0, '0', qtgui_vector_sink_f_0, '1']
- [zeromq_sub_source_0, '0', qtgui_freq_sink_x_0, '0']
- [zeromq_sub_source_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1

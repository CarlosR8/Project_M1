options:
  parameters:
    author: cmrivera
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: tx_Pi
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Raspberry pi emitter (gr-rpitx)
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: entry_var_amplitude_
  id: variable
  parameters:
    comment: ''
    value: '0.3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 12.0]
    rotation: 0
    state: true
- name: entry_var_carrying_frequency
  id: variable
  parameters:
    comment: ''
    value: 86.8e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 76.0]
    rotation: 0
    state: true
- name: entry_var_frequency_
  id: variable
  parameters:
    comment: ''
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 12.0]
    rotation: 0
    state: true
- name: entry_var_measured_frequency
  id: variable
  parameters:
    comment: ''
    value: 434e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 76.0]
    rotation: 0
    state: true
- name: entry_var_offset_
  id: variable
  parameters:
    comment: ''
    value: '0.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 12.0]
    rotation: 0
    state: true
- name: entry_var_sample_rate_gr
  id: variable
  parameters:
    comment: ''
    value: 200e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 12.0]
    rotation: 0
    state: enabled
- name: entry_var_sample_rate_osmosdr
  id: variable
  parameters:
    comment: ''
    value: 1.152e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 76.0]
    rotation: 0
    state: enabled
- name: var_waveform_
  id: variable
  parameters:
    comment: 'Constant = 100

      Sine = 101

      Cosine = 102

      Square = 103

      Triangle = 104

      Saw Tooth = 105'
    value: '101'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 12.0]
    rotation: 0
    state: true
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 252.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: entry_var_amplitude_
    comment: ''
    freq: entry_var_frequency_
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: entry_var_offset_
    phase: '0'
    samp_rate: entry_var_sample_rate_gr
    type: float
    waveform: var_waveform_
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 124.0]
    rotation: 0
    state: true
- name: blocks_magphase_to_complex_0
  id: blocks_magphase_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 168.0]
    rotation: 0
    state: true
- name: epy_module_server
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\nimport\
      \ socket\nimport json  # To save variables as json\nimport ntpath  # To retrieve\
      \ file name out of address\nimport os.path\nfrom os import path\n\n# Declaring\
      \ class for \"shared variable\" object (communication between flowcharts)\n\
      class Shared_Variable:\n\tnames = [] # List of variable names\n\tvalues = []\
      \ # List of variable values\n\tshared_variables = [] # List of variables set\
      \ on init\n\tdef __init__(self,shared_variables_):\n\t\tself.shared_variables\
      \ = shared_variables_\n\tdef clear(self):\n\t\tself.names = []\n\t\tself.values\
      \ = []\n\tdef save_variables(self, tt):\n\t\t\tself.clear()\n\t\t\tfor variable\
      \ in self.shared_variables:\n\t\t\t\tself.names.append(variable)\n\t\t\t\tself.values.append(eval(\"\
      tt.get_{}()\".format(variable)))\n\t\t\t# Saving in json file\n\t\t\tf = open(\"\
      shared_variables.json\", \"w\")\n\t\t\tf.write(json.dumps(self.__dict__))\n\t\
      \t\tf.close()\n\tdef retrieve_variables(self, tt):\n\t\t# Check if file exist\n\
      \t\tif(path.exists(\"shared_variables.json\")):\n\t\t\twith open(\"shared_variables.json\"\
      ) as f:\n\t\t\t\tcontent = f.readline()\n\t\t\t\tself.__dict__ = json.loads(content)\n\
      \t\t\t# Once read, remove it\t\n\t\t\tos.remove(\"shared_variables.json\")\t\
      \n\t\t\n# \n\ndef server(tt):\n\twhile True:\n\t\t# Create list of shared variables\n\
      \t\tshared_variables = [\"entry_var_sample_rate_osmosdr\",\"entry_var_measured_frequency\"\
      ]\n\t\tsFile = Shared_Variable(shared_variables)\n\t\t#Save current local variables\
      \ to share them\n\t\tsFile.save_variables(tt)\n\n\t\t# Configure socket\n\t\t\
      sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\t\tsock.setsockopt(socket.SOL_SOCKET,\
      \ socket.SO_REUSEADDR, 1)\n\t\tsock.bind(('192.168.137.8',4242))\n\t\t# Listen\n\
      \t\tprint(\"Waiting for connection...\")\n\t\tsock.listen(1)\n\t\t# Connected\n\
      \t\tconn,addr=sock.accept()\n\t\twith conn:\n\t\t\tprint('Connected from: ',\
      \ addr)\n\t\t\tmessage = \"\" # Variable to store complete message\n\t\t\twhile\
      \ True:\n\t\t\t\t# Get text\n\t\t\t\tdata=conn.recv(1)\n\t\t\t\tif data:\n\t\
      \t\t\t\tdata=data.decode()\n\t\t\t\t\tmessage = message+data\n\t\t\t\t\tif '>'\
      \ in message: # Delimiter to indicate end of message\n\t\t\t\t\t\ttry:\n\t\t\
      \t\t\t\t\t# Changing local variables\n\t\t\t\t\t\t\tmessage = message.replace('>','').strip()\n\
      \t\t\t\t\t\t\t[var_name, var_value] = message.split(\"=\")\n\t\t\t\t\t\t\tcommand\
      \ = \"tt.{}=float({})\".format(var_name, var_value)\n\t\t\t\t\t\t\texec(command)\
      \ \n\t\t\t\t\t\t\tcommand = \"tt.set_{}(float({}))\".format(var_name, var_value)\n\
      \t\t\t\t\t\t\texec(command) \n\t\t\t\t\t\t\tprint(\"The new value of the variable\
      \ {} is: {}\".format(var_name, var_value))\n\t\t\t\t\t\t\tmessage = \"\" # Reset\
      \ message variable\n\n\t\t\t\t\t\t\t# Save current values on \"shared variables\"\
      \ file\n\t\t\t\t\t\t\tsFile.save_variables(tt)\n\t\t\t\t\t\texcept:\n\t\t\t\t\
      \t\t\tmessage = \"\" # Reset message variable\n\t\t\t\t\t\t\tprint(\"Error:\
      \ variable not set\")\t\t\t\t\t\t\n\t\t\t\t\t# Quit\n\t\t\t\t\tif 'quit' in\
      \ message:\n\t\t\t\t\t\tprint(\"Closing connection...\")\n\t\t\t\t\t\tsock.shutdown(socket.SHUT_RDWR)\n\
      \t\t\t\t\t\tsock.close()\n\t\t\t\t\t\tbreak # Back to listen loop"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 364.0]
    rotation: 0
    state: true
- name: rpitx_rpitx_sink_0
  id: rpitx_rpitx_sink
  parameters:
    affinity: ''
    alias: ''
    carrier_freq: entry_var_carrying_frequency
    comment: ''
    samp_rate: entry_var_sample_rate_gr
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 172.0]
    rotation: 0
    state: true
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: 'print("Starting server")

      import threading

      threading.Thread(target=epy_module_server.server,args=(self,)).start()

      from subprocess import Popen

      Popen([''python'', ''rx_Pi.py''])'
    comment: ''
    priority: '0'
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 300.0]
    rotation: 0
    state: true

connections:
- [analog_const_source_x_0, '0', blocks_magphase_to_complex_0, '1']
- [analog_sig_source_x_0, '0', blocks_magphase_to_complex_0, '0']
- [blocks_magphase_to_complex_0, '0', rpitx_rpitx_sink_0, '0']

metadata:
  file_format: 1
